#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HotelManagement")]
	public partial class QLKSDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertSTATUSROOM(STATUSROOM instance);
    partial void UpdateSTATUSROOM(STATUSROOM instance);
    partial void DeleteSTATUSROOM(STATUSROOM instance);
    partial void InsertBILL(BILL instance);
    partial void UpdateBILL(BILL instance);
    partial void DeleteBILL(BILL instance);
    partial void InsertBILLDETAIL(BILLDETAIL instance);
    partial void UpdateBILLDETAIL(BILLDETAIL instance);
    partial void DeleteBILLDETAIL(BILLDETAIL instance);
    partial void InsertBOOKROOM(BOOKROOM instance);
    partial void UpdateBOOKROOM(BOOKROOM instance);
    partial void DeleteBOOKROOM(BOOKROOM instance);
    partial void InsertCUSTOMER(CUSTOMER instance);
    partial void UpdateCUSTOMER(CUSTOMER instance);
    partial void DeleteCUSTOMER(CUSTOMER instance);
    partial void InsertCUSTOMERTYPE(CUSTOMERTYPE instance);
    partial void UpdateCUSTOMERTYPE(CUSTOMERTYPE instance);
    partial void DeleteCUSTOMERTYPE(CUSTOMERTYPE instance);
    partial void Insertjob(job instance);
    partial void Updatejob(job instance);
    partial void Deletejob(job instance);
    partial void InsertPURCHASEORDER(PURCHASEORDER instance);
    partial void UpdatePURCHASEORDER(PURCHASEORDER instance);
    partial void DeletePURCHASEORDER(PURCHASEORDER instance);
    partial void InsertPURCHASEORDERDETAIL(PURCHASEORDERDETAIL instance);
    partial void UpdatePURCHASEORDERDETAIL(PURCHASEORDERDETAIL instance);
    partial void DeletePURCHASEORDERDETAIL(PURCHASEORDERDETAIL instance);
    partial void InsertRECEIVEROOM(RECEIVEROOM instance);
    partial void UpdateRECEIVEROOM(RECEIVEROOM instance);
    partial void DeleteRECEIVEROOM(RECEIVEROOM instance);
    partial void InsertRECEIVEROOMDETAIL(RECEIVEROOMDETAIL instance);
    partial void UpdateRECEIVEROOMDETAIL(RECEIVEROOMDETAIL instance);
    partial void DeleteRECEIVEROOMDETAIL(RECEIVEROOMDETAIL instance);
    partial void InsertROOM(ROOM instance);
    partial void UpdateROOM(ROOM instance);
    partial void DeleteROOM(ROOM instance);
    partial void InsertROOMTYPE(ROOMTYPE instance);
    partial void UpdateROOMTYPE(ROOMTYPE instance);
    partial void DeleteROOMTYPE(ROOMTYPE instance);
    partial void InsertSERVICE(SERVICE instance);
    partial void UpdateSERVICE(SERVICE instance);
    partial void DeleteSERVICE(SERVICE instance);
    partial void InsertSERVICETYPE(SERVICETYPE instance);
    partial void UpdateSERVICETYPE(SERVICETYPE instance);
    partial void DeleteSERVICETYPE(SERVICETYPE instance);
    partial void InsertSTAFF(STAFF instance);
    partial void UpdateSTAFF(STAFF instance);
    partial void DeleteSTAFF(STAFF instance);
    partial void InsertSTAFFTYPE(STAFFTYPE instance);
    partial void UpdateSTAFFTYPE(STAFFTYPE instance);
    partial void DeleteSTAFFTYPE(STAFFTYPE instance);
    partial void InsertSTATUSBILL(STATUSBILL instance);
    partial void UpdateSTATUSBILL(STATUSBILL instance);
    partial void DeleteSTATUSBILL(STATUSBILL instance);
    #endregion
		
		public QLKSDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QLKSDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QLKSDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QLKSDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<access> accesses
		{
			get
			{
				return this.GetTable<access>();
			}
		}
		
		public System.Data.Linq.Table<STATUSROOM> STATUSROOMs
		{
			get
			{
				return this.GetTable<STATUSROOM>();
			}
		}
		
		public System.Data.Linq.Table<BILL> BILLs
		{
			get
			{
				return this.GetTable<BILL>();
			}
		}
		
		public System.Data.Linq.Table<BILLDETAIL> BILLDETAILs
		{
			get
			{
				return this.GetTable<BILLDETAIL>();
			}
		}
		
		public System.Data.Linq.Table<BOOKROOM> BOOKROOMs
		{
			get
			{
				return this.GetTable<BOOKROOM>();
			}
		}
		
		public System.Data.Linq.Table<CUSTOMER> CUSTOMERs
		{
			get
			{
				return this.GetTable<CUSTOMER>();
			}
		}
		
		public System.Data.Linq.Table<CUSTOMERTYPE> CUSTOMERTYPEs
		{
			get
			{
				return this.GetTable<CUSTOMERTYPE>();
			}
		}
		
		public System.Data.Linq.Table<job> jobs
		{
			get
			{
				return this.GetTable<job>();
			}
		}
		
		public System.Data.Linq.Table<PARAMETER> PARAMETERs
		{
			get
			{
				return this.GetTable<PARAMETER>();
			}
		}
		
		public System.Data.Linq.Table<PURCHASEORDER> PURCHASEORDERs
		{
			get
			{
				return this.GetTable<PURCHASEORDER>();
			}
		}
		
		public System.Data.Linq.Table<PURCHASEORDERDETAIL> PURCHASEORDERDETAILs
		{
			get
			{
				return this.GetTable<PURCHASEORDERDETAIL>();
			}
		}
		
		public System.Data.Linq.Table<RECEIVEROOM> RECEIVEROOMs
		{
			get
			{
				return this.GetTable<RECEIVEROOM>();
			}
		}
		
		public System.Data.Linq.Table<RECEIVEROOMDETAIL> RECEIVEROOMDETAILs
		{
			get
			{
				return this.GetTable<RECEIVEROOMDETAIL>();
			}
		}
		
		public System.Data.Linq.Table<report> reports
		{
			get
			{
				return this.GetTable<report>();
			}
		}
		
		public System.Data.Linq.Table<ROOM> ROOMs
		{
			get
			{
				return this.GetTable<ROOM>();
			}
		}
		
		public System.Data.Linq.Table<ROOMTYPE> ROOMTYPEs
		{
			get
			{
				return this.GetTable<ROOMTYPE>();
			}
		}
		
		public System.Data.Linq.Table<SERVICE> SERVICEs
		{
			get
			{
				return this.GetTable<SERVICE>();
			}
		}
		
		public System.Data.Linq.Table<SERVICETYPE> SERVICETYPEs
		{
			get
			{
				return this.GetTable<SERVICETYPE>();
			}
		}
		
		public System.Data.Linq.Table<STAFF> STAFFs
		{
			get
			{
				return this.GetTable<STAFF>();
			}
		}
		
		public System.Data.Linq.Table<STAFFTYPE> STAFFTYPEs
		{
			get
			{
				return this.GetTable<STAFFTYPE>();
			}
		}
		
		public System.Data.Linq.Table<STATUSBILL> STATUSBILLs
		{
			get
			{
				return this.GetTable<STATUSBILL>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.access")]
	public partial class access
	{
		
		private System.Nullable<int> _Idstafftype;
		
		private System.Nullable<int> _idjob;
		
		public access()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Idstafftype", DbType="Int")]
		public System.Nullable<int> Idstafftype
		{
			get
			{
				return this._Idstafftype;
			}
			set
			{
				if ((this._Idstafftype != value))
				{
					this._Idstafftype = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idjob", DbType="Int")]
		public System.Nullable<int> idjob
		{
			get
			{
				return this._idjob;
			}
			set
			{
				if ((this._idjob != value))
				{
					this._idjob = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.STATUSROOM")]
	public partial class STATUSROOM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<ROOM> _ROOMs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public STATUSROOM()
		{
			this._ROOMs = new EntitySet<ROOM>(new Action<ROOM>(this.attach_ROOMs), new Action<ROOM>(this.detach_ROOMs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STATUSROOM_ROOM", Storage="_ROOMs", ThisKey="ID", OtherKey="IDStatusRoom")]
		public EntitySet<ROOM> ROOMs
		{
			get
			{
				return this._ROOMs;
			}
			set
			{
				this._ROOMs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ROOMs(ROOM entity)
		{
			this.SendPropertyChanging();
			entity.STATUSROOM = this;
		}
		
		private void detach_ROOMs(ROOM entity)
		{
			this.SendPropertyChanging();
			entity.STATUSROOM = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BILL")]
	public partial class BILL : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _IDReceiveRoom;
		
		private string _StaffSetUp;
		
		private System.Nullable<System.DateTime> _DateOfCreate;
		
		private int _RoomPrice;
		
		private int _ServicePrice;
		
		private int _Surcharge;
		
		private int _TotalPrice;
		
		private int _Discount;
		
		private int _IDStatusBill;
		
		private EntitySet<BILLDETAIL> _BILLDETAILs;
		
		private EntityRef<RECEIVEROOM> _RECEIVEROOM;
		
		private EntityRef<STAFF> _STAFF;
		
		private EntityRef<STATUSBILL> _STATUSBILL;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIDReceiveRoomChanging(int value);
    partial void OnIDReceiveRoomChanged();
    partial void OnStaffSetUpChanging(string value);
    partial void OnStaffSetUpChanged();
    partial void OnDateOfCreateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfCreateChanged();
    partial void OnRoomPriceChanging(int value);
    partial void OnRoomPriceChanged();
    partial void OnServicePriceChanging(int value);
    partial void OnServicePriceChanged();
    partial void OnSurchargeChanging(int value);
    partial void OnSurchargeChanged();
    partial void OnTotalPriceChanging(int value);
    partial void OnTotalPriceChanged();
    partial void OnDiscountChanging(int value);
    partial void OnDiscountChanged();
    partial void OnIDStatusBillChanging(int value);
    partial void OnIDStatusBillChanged();
    #endregion
		
		public BILL()
		{
			this._BILLDETAILs = new EntitySet<BILLDETAIL>(new Action<BILLDETAIL>(this.attach_BILLDETAILs), new Action<BILLDETAIL>(this.detach_BILLDETAILs));
			this._RECEIVEROOM = default(EntityRef<RECEIVEROOM>);
			this._STAFF = default(EntityRef<STAFF>);
			this._STATUSBILL = default(EntityRef<STATUSBILL>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDReceiveRoom", DbType="Int NOT NULL")]
		public int IDReceiveRoom
		{
			get
			{
				return this._IDReceiveRoom;
			}
			set
			{
				if ((this._IDReceiveRoom != value))
				{
					if (this._RECEIVEROOM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDReceiveRoomChanging(value);
					this.SendPropertyChanging();
					this._IDReceiveRoom = value;
					this.SendPropertyChanged("IDReceiveRoom");
					this.OnIDReceiveRoomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffSetUp", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string StaffSetUp
		{
			get
			{
				return this._StaffSetUp;
			}
			set
			{
				if ((this._StaffSetUp != value))
				{
					if (this._STAFF.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffSetUpChanging(value);
					this.SendPropertyChanging();
					this._StaffSetUp = value;
					this.SendPropertyChanged("StaffSetUp");
					this.OnStaffSetUpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfCreate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> DateOfCreate
		{
			get
			{
				return this._DateOfCreate;
			}
			set
			{
				if ((this._DateOfCreate != value))
				{
					this.OnDateOfCreateChanging(value);
					this.SendPropertyChanging();
					this._DateOfCreate = value;
					this.SendPropertyChanged("DateOfCreate");
					this.OnDateOfCreateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomPrice", DbType="Int NOT NULL")]
		public int RoomPrice
		{
			get
			{
				return this._RoomPrice;
			}
			set
			{
				if ((this._RoomPrice != value))
				{
					this.OnRoomPriceChanging(value);
					this.SendPropertyChanging();
					this._RoomPrice = value;
					this.SendPropertyChanged("RoomPrice");
					this.OnRoomPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServicePrice", DbType="Int NOT NULL")]
		public int ServicePrice
		{
			get
			{
				return this._ServicePrice;
			}
			set
			{
				if ((this._ServicePrice != value))
				{
					this.OnServicePriceChanging(value);
					this.SendPropertyChanging();
					this._ServicePrice = value;
					this.SendPropertyChanged("ServicePrice");
					this.OnServicePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surcharge", DbType="Int NOT NULL")]
		public int Surcharge
		{
			get
			{
				return this._Surcharge;
			}
			set
			{
				if ((this._Surcharge != value))
				{
					this.OnSurchargeChanging(value);
					this.SendPropertyChanging();
					this._Surcharge = value;
					this.SendPropertyChanged("Surcharge");
					this.OnSurchargeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPrice", DbType="Int NOT NULL")]
		public int TotalPrice
		{
			get
			{
				return this._TotalPrice;
			}
			set
			{
				if ((this._TotalPrice != value))
				{
					this.OnTotalPriceChanging(value);
					this.SendPropertyChanging();
					this._TotalPrice = value;
					this.SendPropertyChanged("TotalPrice");
					this.OnTotalPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discount", DbType="Int NOT NULL")]
		public int Discount
		{
			get
			{
				return this._Discount;
			}
			set
			{
				if ((this._Discount != value))
				{
					this.OnDiscountChanging(value);
					this.SendPropertyChanging();
					this._Discount = value;
					this.SendPropertyChanged("Discount");
					this.OnDiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDStatusBill", DbType="Int NOT NULL")]
		public int IDStatusBill
		{
			get
			{
				return this._IDStatusBill;
			}
			set
			{
				if ((this._IDStatusBill != value))
				{
					if (this._STATUSBILL.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDStatusBillChanging(value);
					this.SendPropertyChanging();
					this._IDStatusBill = value;
					this.SendPropertyChanged("IDStatusBill");
					this.OnIDStatusBillChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BILL_BILLDETAIL", Storage="_BILLDETAILs", ThisKey="ID", OtherKey="IDBill")]
		public EntitySet<BILLDETAIL> BILLDETAILs
		{
			get
			{
				return this._BILLDETAILs;
			}
			set
			{
				this._BILLDETAILs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RECEIVEROOM_BILL", Storage="_RECEIVEROOM", ThisKey="IDReceiveRoom", OtherKey="ID", IsForeignKey=true)]
		public RECEIVEROOM RECEIVEROOM
		{
			get
			{
				return this._RECEIVEROOM.Entity;
			}
			set
			{
				RECEIVEROOM previousValue = this._RECEIVEROOM.Entity;
				if (((previousValue != value) 
							|| (this._RECEIVEROOM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RECEIVEROOM.Entity = null;
						previousValue.BILLs.Remove(this);
					}
					this._RECEIVEROOM.Entity = value;
					if ((value != null))
					{
						value.BILLs.Add(this);
						this._IDReceiveRoom = value.ID;
					}
					else
					{
						this._IDReceiveRoom = default(int);
					}
					this.SendPropertyChanged("RECEIVEROOM");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STAFF_BILL", Storage="_STAFF", ThisKey="StaffSetUp", OtherKey="UserName", IsForeignKey=true)]
		public STAFF STAFF
		{
			get
			{
				return this._STAFF.Entity;
			}
			set
			{
				STAFF previousValue = this._STAFF.Entity;
				if (((previousValue != value) 
							|| (this._STAFF.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._STAFF.Entity = null;
						previousValue.BILLs.Remove(this);
					}
					this._STAFF.Entity = value;
					if ((value != null))
					{
						value.BILLs.Add(this);
						this._StaffSetUp = value.UserName;
					}
					else
					{
						this._StaffSetUp = default(string);
					}
					this.SendPropertyChanged("STAFF");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STATUSBILL_BILL", Storage="_STATUSBILL", ThisKey="IDStatusBill", OtherKey="ID", IsForeignKey=true)]
		public STATUSBILL STATUSBILL
		{
			get
			{
				return this._STATUSBILL.Entity;
			}
			set
			{
				STATUSBILL previousValue = this._STATUSBILL.Entity;
				if (((previousValue != value) 
							|| (this._STATUSBILL.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._STATUSBILL.Entity = null;
						previousValue.BILLs.Remove(this);
					}
					this._STATUSBILL.Entity = value;
					if ((value != null))
					{
						value.BILLs.Add(this);
						this._IDStatusBill = value.ID;
					}
					else
					{
						this._IDStatusBill = default(int);
					}
					this.SendPropertyChanged("STATUSBILL");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BILLDETAILs(BILLDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.BILL = this;
		}
		
		private void detach_BILLDETAILs(BILLDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.BILL = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BILLDETAILS")]
	public partial class BILLDETAIL : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDBill;
		
		private int _IDService;
		
		private int _Count;
		
		private int _TotalPrice;
		
		private EntityRef<BILL> _BILL;
		
		private EntityRef<SERVICE> _SERVICE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDBillChanging(int value);
    partial void OnIDBillChanged();
    partial void OnIDServiceChanging(int value);
    partial void OnIDServiceChanged();
    partial void OnCountChanging(int value);
    partial void OnCountChanged();
    partial void OnTotalPriceChanging(int value);
    partial void OnTotalPriceChanged();
    #endregion
		
		public BILLDETAIL()
		{
			this._BILL = default(EntityRef<BILL>);
			this._SERVICE = default(EntityRef<SERVICE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDBill", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDBill
		{
			get
			{
				return this._IDBill;
			}
			set
			{
				if ((this._IDBill != value))
				{
					if (this._BILL.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDBillChanging(value);
					this.SendPropertyChanging();
					this._IDBill = value;
					this.SendPropertyChanged("IDBill");
					this.OnIDBillChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDService", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDService
		{
			get
			{
				return this._IDService;
			}
			set
			{
				if ((this._IDService != value))
				{
					if (this._SERVICE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDServiceChanging(value);
					this.SendPropertyChanging();
					this._IDService = value;
					this.SendPropertyChanged("IDService");
					this.OnIDServiceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Count", DbType="Int NOT NULL")]
		public int Count
		{
			get
			{
				return this._Count;
			}
			set
			{
				if ((this._Count != value))
				{
					this.OnCountChanging(value);
					this.SendPropertyChanging();
					this._Count = value;
					this.SendPropertyChanged("Count");
					this.OnCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPrice", DbType="Int NOT NULL")]
		public int TotalPrice
		{
			get
			{
				return this._TotalPrice;
			}
			set
			{
				if ((this._TotalPrice != value))
				{
					this.OnTotalPriceChanging(value);
					this.SendPropertyChanging();
					this._TotalPrice = value;
					this.SendPropertyChanged("TotalPrice");
					this.OnTotalPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BILL_BILLDETAIL", Storage="_BILL", ThisKey="IDBill", OtherKey="ID", IsForeignKey=true)]
		public BILL BILL
		{
			get
			{
				return this._BILL.Entity;
			}
			set
			{
				BILL previousValue = this._BILL.Entity;
				if (((previousValue != value) 
							|| (this._BILL.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BILL.Entity = null;
						previousValue.BILLDETAILs.Remove(this);
					}
					this._BILL.Entity = value;
					if ((value != null))
					{
						value.BILLDETAILs.Add(this);
						this._IDBill = value.ID;
					}
					else
					{
						this._IDBill = default(int);
					}
					this.SendPropertyChanged("BILL");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SERVICE_BILLDETAIL", Storage="_SERVICE", ThisKey="IDService", OtherKey="ID", IsForeignKey=true)]
		public SERVICE SERVICE
		{
			get
			{
				return this._SERVICE.Entity;
			}
			set
			{
				SERVICE previousValue = this._SERVICE.Entity;
				if (((previousValue != value) 
							|| (this._SERVICE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SERVICE.Entity = null;
						previousValue.BILLDETAILs.Remove(this);
					}
					this._SERVICE.Entity = value;
					if ((value != null))
					{
						value.BILLDETAILs.Add(this);
						this._IDService = value.ID;
					}
					else
					{
						this._IDService = default(int);
					}
					this.SendPropertyChanged("SERVICE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BOOKROOM")]
	public partial class BOOKROOM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _IDCustomer;
		
		private int _IDRoomType;
		
		private System.DateTime _DateBookRoom;
		
		private System.DateTime _DateCheckIn;
		
		private System.DateTime _DateCheckOut;
		
		private EntitySet<RECEIVEROOM> _RECEIVEROOMs;
		
		private EntityRef<CUSTOMER> _CUSTOMER;
		
		private EntityRef<ROOMTYPE> _ROOMTYPE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIDCustomerChanging(int value);
    partial void OnIDCustomerChanged();
    partial void OnIDRoomTypeChanging(int value);
    partial void OnIDRoomTypeChanged();
    partial void OnDateBookRoomChanging(System.DateTime value);
    partial void OnDateBookRoomChanged();
    partial void OnDateCheckInChanging(System.DateTime value);
    partial void OnDateCheckInChanged();
    partial void OnDateCheckOutChanging(System.DateTime value);
    partial void OnDateCheckOutChanged();
    #endregion
		
		public BOOKROOM()
		{
			this._RECEIVEROOMs = new EntitySet<RECEIVEROOM>(new Action<RECEIVEROOM>(this.attach_RECEIVEROOMs), new Action<RECEIVEROOM>(this.detach_RECEIVEROOMs));
			this._CUSTOMER = default(EntityRef<CUSTOMER>);
			this._ROOMTYPE = default(EntityRef<ROOMTYPE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCustomer", DbType="Int NOT NULL")]
		public int IDCustomer
		{
			get
			{
				return this._IDCustomer;
			}
			set
			{
				if ((this._IDCustomer != value))
				{
					if (this._CUSTOMER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCustomerChanging(value);
					this.SendPropertyChanging();
					this._IDCustomer = value;
					this.SendPropertyChanged("IDCustomer");
					this.OnIDCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRoomType", DbType="Int NOT NULL")]
		public int IDRoomType
		{
			get
			{
				return this._IDRoomType;
			}
			set
			{
				if ((this._IDRoomType != value))
				{
					if (this._ROOMTYPE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDRoomTypeChanging(value);
					this.SendPropertyChanging();
					this._IDRoomType = value;
					this.SendPropertyChanged("IDRoomType");
					this.OnIDRoomTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateBookRoom", DbType="SmallDateTime NOT NULL")]
		public System.DateTime DateBookRoom
		{
			get
			{
				return this._DateBookRoom;
			}
			set
			{
				if ((this._DateBookRoom != value))
				{
					this.OnDateBookRoomChanging(value);
					this.SendPropertyChanging();
					this._DateBookRoom = value;
					this.SendPropertyChanged("DateBookRoom");
					this.OnDateBookRoomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCheckIn", DbType="Date NOT NULL")]
		public System.DateTime DateCheckIn
		{
			get
			{
				return this._DateCheckIn;
			}
			set
			{
				if ((this._DateCheckIn != value))
				{
					this.OnDateCheckInChanging(value);
					this.SendPropertyChanging();
					this._DateCheckIn = value;
					this.SendPropertyChanged("DateCheckIn");
					this.OnDateCheckInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCheckOut", DbType="Date NOT NULL")]
		public System.DateTime DateCheckOut
		{
			get
			{
				return this._DateCheckOut;
			}
			set
			{
				if ((this._DateCheckOut != value))
				{
					this.OnDateCheckOutChanging(value);
					this.SendPropertyChanging();
					this._DateCheckOut = value;
					this.SendPropertyChanged("DateCheckOut");
					this.OnDateCheckOutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BOOKROOM_RECEIVEROOM", Storage="_RECEIVEROOMs", ThisKey="ID", OtherKey="IDBookRoom")]
		public EntitySet<RECEIVEROOM> RECEIVEROOMs
		{
			get
			{
				return this._RECEIVEROOMs;
			}
			set
			{
				this._RECEIVEROOMs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CUSTOMER_BOOKROOM", Storage="_CUSTOMER", ThisKey="IDCustomer", OtherKey="ID", IsForeignKey=true)]
		public CUSTOMER CUSTOMER
		{
			get
			{
				return this._CUSTOMER.Entity;
			}
			set
			{
				CUSTOMER previousValue = this._CUSTOMER.Entity;
				if (((previousValue != value) 
							|| (this._CUSTOMER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CUSTOMER.Entity = null;
						previousValue.BOOKROOMs.Remove(this);
					}
					this._CUSTOMER.Entity = value;
					if ((value != null))
					{
						value.BOOKROOMs.Add(this);
						this._IDCustomer = value.ID;
					}
					else
					{
						this._IDCustomer = default(int);
					}
					this.SendPropertyChanged("CUSTOMER");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ROOMTYPE_BOOKROOM", Storage="_ROOMTYPE", ThisKey="IDRoomType", OtherKey="ID", IsForeignKey=true)]
		public ROOMTYPE ROOMTYPE
		{
			get
			{
				return this._ROOMTYPE.Entity;
			}
			set
			{
				ROOMTYPE previousValue = this._ROOMTYPE.Entity;
				if (((previousValue != value) 
							|| (this._ROOMTYPE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ROOMTYPE.Entity = null;
						previousValue.BOOKROOMs.Remove(this);
					}
					this._ROOMTYPE.Entity = value;
					if ((value != null))
					{
						value.BOOKROOMs.Add(this);
						this._IDRoomType = value.ID;
					}
					else
					{
						this._IDRoomType = default(int);
					}
					this.SendPropertyChanged("ROOMTYPE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RECEIVEROOMs(RECEIVEROOM entity)
		{
			this.SendPropertyChanging();
			entity.BOOKROOM = this;
		}
		
		private void detach_RECEIVEROOMs(RECEIVEROOM entity)
		{
			this.SendPropertyChanging();
			entity.BOOKROOM = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CUSTOMER")]
	public partial class CUSTOMER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _IDCard;
		
		private int _IDCustomerType;
		
		private string _Name;
		
		private System.DateTime _DateOfBirth;
		
		private string _Address;
		
		private int _PhoneNumber;
		
		private string _Sex;
		
		private string _Nationality;
		
		private EntitySet<BOOKROOM> _BOOKROOMs;
		
		private EntitySet<RECEIVEROOMDETAIL> _RECEIVEROOMDETAILs;
		
		private EntityRef<CUSTOMERTYPE> _CUSTOMERTYPE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIDCardChanging(string value);
    partial void OnIDCardChanged();
    partial void OnIDCustomerTypeChanging(int value);
    partial void OnIDCustomerTypeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDateOfBirthChanging(System.DateTime value);
    partial void OnDateOfBirthChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneNumberChanging(int value);
    partial void OnPhoneNumberChanged();
    partial void OnSexChanging(string value);
    partial void OnSexChanged();
    partial void OnNationalityChanging(string value);
    partial void OnNationalityChanged();
    #endregion
		
		public CUSTOMER()
		{
			this._BOOKROOMs = new EntitySet<BOOKROOM>(new Action<BOOKROOM>(this.attach_BOOKROOMs), new Action<BOOKROOM>(this.detach_BOOKROOMs));
			this._RECEIVEROOMDETAILs = new EntitySet<RECEIVEROOMDETAIL>(new Action<RECEIVEROOMDETAIL>(this.attach_RECEIVEROOMDETAILs), new Action<RECEIVEROOMDETAIL>(this.detach_RECEIVEROOMDETAILs));
			this._CUSTOMERTYPE = default(EntityRef<CUSTOMERTYPE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCard", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string IDCard
		{
			get
			{
				return this._IDCard;
			}
			set
			{
				if ((this._IDCard != value))
				{
					this.OnIDCardChanging(value);
					this.SendPropertyChanging();
					this._IDCard = value;
					this.SendPropertyChanged("IDCard");
					this.OnIDCardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCustomerType", DbType="Int NOT NULL")]
		public int IDCustomerType
		{
			get
			{
				return this._IDCustomerType;
			}
			set
			{
				if ((this._IDCustomerType != value))
				{
					if (this._CUSTOMERTYPE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCustomerTypeChanging(value);
					this.SendPropertyChanging();
					this._IDCustomerType = value;
					this.SendPropertyChanged("IDCustomerType");
					this.OnIDCustomerTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="Date NOT NULL")]
		public System.DateTime DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="Int NOT NULL")]
		public int PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sex", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._Sex = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nationality", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Nationality
		{
			get
			{
				return this._Nationality;
			}
			set
			{
				if ((this._Nationality != value))
				{
					this.OnNationalityChanging(value);
					this.SendPropertyChanging();
					this._Nationality = value;
					this.SendPropertyChanged("Nationality");
					this.OnNationalityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CUSTOMER_BOOKROOM", Storage="_BOOKROOMs", ThisKey="ID", OtherKey="IDCustomer")]
		public EntitySet<BOOKROOM> BOOKROOMs
		{
			get
			{
				return this._BOOKROOMs;
			}
			set
			{
				this._BOOKROOMs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CUSTOMER_RECEIVEROOMDETAIL", Storage="_RECEIVEROOMDETAILs", ThisKey="ID", OtherKey="IDCustomerOther")]
		public EntitySet<RECEIVEROOMDETAIL> RECEIVEROOMDETAILs
		{
			get
			{
				return this._RECEIVEROOMDETAILs;
			}
			set
			{
				this._RECEIVEROOMDETAILs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CUSTOMERTYPE_CUSTOMER", Storage="_CUSTOMERTYPE", ThisKey="IDCustomerType", OtherKey="ID", IsForeignKey=true)]
		public CUSTOMERTYPE CUSTOMERTYPE
		{
			get
			{
				return this._CUSTOMERTYPE.Entity;
			}
			set
			{
				CUSTOMERTYPE previousValue = this._CUSTOMERTYPE.Entity;
				if (((previousValue != value) 
							|| (this._CUSTOMERTYPE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CUSTOMERTYPE.Entity = null;
						previousValue.CUSTOMERs.Remove(this);
					}
					this._CUSTOMERTYPE.Entity = value;
					if ((value != null))
					{
						value.CUSTOMERs.Add(this);
						this._IDCustomerType = value.ID;
					}
					else
					{
						this._IDCustomerType = default(int);
					}
					this.SendPropertyChanged("CUSTOMERTYPE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BOOKROOMs(BOOKROOM entity)
		{
			this.SendPropertyChanging();
			entity.CUSTOMER = this;
		}
		
		private void detach_BOOKROOMs(BOOKROOM entity)
		{
			this.SendPropertyChanging();
			entity.CUSTOMER = null;
		}
		
		private void attach_RECEIVEROOMDETAILs(RECEIVEROOMDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.CUSTOMER = this;
		}
		
		private void detach_RECEIVEROOMDETAILs(RECEIVEROOMDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.CUSTOMER = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CUSTOMERTYPE")]
	public partial class CUSTOMERTYPE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<CUSTOMER> _CUSTOMERs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public CUSTOMERTYPE()
		{
			this._CUSTOMERs = new EntitySet<CUSTOMER>(new Action<CUSTOMER>(this.attach_CUSTOMERs), new Action<CUSTOMER>(this.detach_CUSTOMERs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CUSTOMERTYPE_CUSTOMER", Storage="_CUSTOMERs", ThisKey="ID", OtherKey="IDCustomerType")]
		public EntitySet<CUSTOMER> CUSTOMERs
		{
			get
			{
				return this._CUSTOMERs;
			}
			set
			{
				this._CUSTOMERs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CUSTOMERs(CUSTOMER entity)
		{
			this.SendPropertyChanging();
			entity.CUSTOMERTYPE = this;
		}
		
		private void detach_CUSTOMERs(CUSTOMER entity)
		{
			this.SendPropertyChanging();
			entity.CUSTOMERTYPE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.job")]
	public partial class job : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _nameform;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnnameformChanging(string value);
    partial void OnnameformChanged();
    #endregion
		
		public job()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(250)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nameform", DbType="NVarChar(250)")]
		public string nameform
		{
			get
			{
				return this._nameform;
			}
			set
			{
				if ((this._nameform != value))
				{
					this.OnnameformChanging(value);
					this.SendPropertyChanging();
					this._nameform = value;
					this.SendPropertyChanged("nameform");
					this.OnnameformChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PARAMETER")]
	public partial class PARAMETER
	{
		
		private string _Name;
		
		private double _Value;
		
		private string _Describe;
		
		public PARAMETER()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Float NOT NULL")]
		public double Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this._Value = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Describe", DbType="NVarChar(200)")]
		public string Describe
		{
			get
			{
				return this._Describe;
			}
			set
			{
				if ((this._Describe != value))
				{
					this._Describe = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PURCHASEORDER")]
	public partial class PURCHASEORDER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _OrderDate;
		
		private string _UserName;
		
		private int _ServiceID;
		
		private EntitySet<PURCHASEORDERDETAIL> _PURCHASEORDERDETAILs;
		
		private EntityRef<SERVICE> _SERVICE;
		
		private EntityRef<STAFF> _STAFF;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnOrderDateChanging(System.DateTime value);
    partial void OnOrderDateChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnServiceIDChanging(int value);
    partial void OnServiceIDChanged();
    #endregion
		
		public PURCHASEORDER()
		{
			this._PURCHASEORDERDETAILs = new EntitySet<PURCHASEORDERDETAIL>(new Action<PURCHASEORDERDETAIL>(this.attach_PURCHASEORDERDETAILs), new Action<PURCHASEORDERDETAIL>(this.detach_PURCHASEORDERDETAILs));
			this._SERVICE = default(EntityRef<SERVICE>);
			this._STAFF = default(EntityRef<STAFF>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDate", DbType="DateTime NOT NULL")]
		public System.DateTime OrderDate
		{
			get
			{
				return this._OrderDate;
			}
			set
			{
				if ((this._OrderDate != value))
				{
					this.OnOrderDateChanging(value);
					this.SendPropertyChanging();
					this._OrderDate = value;
					this.SendPropertyChanged("OrderDate");
					this.OnOrderDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					if (this._STAFF.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceID", DbType="Int NOT NULL")]
		public int ServiceID
		{
			get
			{
				return this._ServiceID;
			}
			set
			{
				if ((this._ServiceID != value))
				{
					if (this._SERVICE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceID = value;
					this.SendPropertyChanged("ServiceID");
					this.OnServiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PURCHASEORDER_PURCHASEORDERDETAIL", Storage="_PURCHASEORDERDETAILs", ThisKey="ID", OtherKey="PurchaseOrderID")]
		public EntitySet<PURCHASEORDERDETAIL> PURCHASEORDERDETAILs
		{
			get
			{
				return this._PURCHASEORDERDETAILs;
			}
			set
			{
				this._PURCHASEORDERDETAILs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SERVICE_PURCHASEORDER", Storage="_SERVICE", ThisKey="ServiceID", OtherKey="ID", IsForeignKey=true)]
		public SERVICE SERVICE
		{
			get
			{
				return this._SERVICE.Entity;
			}
			set
			{
				SERVICE previousValue = this._SERVICE.Entity;
				if (((previousValue != value) 
							|| (this._SERVICE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SERVICE.Entity = null;
						previousValue.PURCHASEORDERs.Remove(this);
					}
					this._SERVICE.Entity = value;
					if ((value != null))
					{
						value.PURCHASEORDERs.Add(this);
						this._ServiceID = value.ID;
					}
					else
					{
						this._ServiceID = default(int);
					}
					this.SendPropertyChanged("SERVICE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STAFF_PURCHASEORDER", Storage="_STAFF", ThisKey="UserName", OtherKey="UserName", IsForeignKey=true)]
		public STAFF STAFF
		{
			get
			{
				return this._STAFF.Entity;
			}
			set
			{
				STAFF previousValue = this._STAFF.Entity;
				if (((previousValue != value) 
							|| (this._STAFF.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._STAFF.Entity = null;
						previousValue.PURCHASEORDERs.Remove(this);
					}
					this._STAFF.Entity = value;
					if ((value != null))
					{
						value.PURCHASEORDERs.Add(this);
						this._UserName = value.UserName;
					}
					else
					{
						this._UserName = default(string);
					}
					this.SendPropertyChanged("STAFF");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PURCHASEORDERDETAILs(PURCHASEORDERDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.PURCHASEORDER = this;
		}
		
		private void detach_PURCHASEORDERDETAILs(PURCHASEORDERDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.PURCHASEORDER = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PURCHASEORDERDETAILS")]
	public partial class PURCHASEORDERDETAIL : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PurchaseOrderID;
		
		private int _ServiceID;
		
		private int _Quantity;
		
		private decimal _UnitPrice;
		
		private EntityRef<PURCHASEORDER> _PURCHASEORDER;
		
		private EntityRef<SERVICE> _SERVICE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPurchaseOrderIDChanging(int value);
    partial void OnPurchaseOrderIDChanged();
    partial void OnServiceIDChanging(int value);
    partial void OnServiceIDChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnUnitPriceChanging(decimal value);
    partial void OnUnitPriceChanged();
    #endregion
		
		public PURCHASEORDERDETAIL()
		{
			this._PURCHASEORDER = default(EntityRef<PURCHASEORDER>);
			this._SERVICE = default(EntityRef<SERVICE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PurchaseOrderID", DbType="Int NOT NULL")]
		public int PurchaseOrderID
		{
			get
			{
				return this._PurchaseOrderID;
			}
			set
			{
				if ((this._PurchaseOrderID != value))
				{
					if (this._PURCHASEORDER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPurchaseOrderIDChanging(value);
					this.SendPropertyChanging();
					this._PurchaseOrderID = value;
					this.SendPropertyChanged("PurchaseOrderID");
					this.OnPurchaseOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceID", DbType="Int NOT NULL")]
		public int ServiceID
		{
			get
			{
				return this._ServiceID;
			}
			set
			{
				if ((this._ServiceID != value))
				{
					if (this._SERVICE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceID = value;
					this.SendPropertyChanged("ServiceID");
					this.OnServiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitPrice", DbType="Decimal(18,2) NOT NULL")]
		public decimal UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PURCHASEORDER_PURCHASEORDERDETAIL", Storage="_PURCHASEORDER", ThisKey="PurchaseOrderID", OtherKey="ID", IsForeignKey=true)]
		public PURCHASEORDER PURCHASEORDER
		{
			get
			{
				return this._PURCHASEORDER.Entity;
			}
			set
			{
				PURCHASEORDER previousValue = this._PURCHASEORDER.Entity;
				if (((previousValue != value) 
							|| (this._PURCHASEORDER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PURCHASEORDER.Entity = null;
						previousValue.PURCHASEORDERDETAILs.Remove(this);
					}
					this._PURCHASEORDER.Entity = value;
					if ((value != null))
					{
						value.PURCHASEORDERDETAILs.Add(this);
						this._PurchaseOrderID = value.ID;
					}
					else
					{
						this._PurchaseOrderID = default(int);
					}
					this.SendPropertyChanged("PURCHASEORDER");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SERVICE_PURCHASEORDERDETAIL", Storage="_SERVICE", ThisKey="ServiceID", OtherKey="ID", IsForeignKey=true)]
		public SERVICE SERVICE
		{
			get
			{
				return this._SERVICE.Entity;
			}
			set
			{
				SERVICE previousValue = this._SERVICE.Entity;
				if (((previousValue != value) 
							|| (this._SERVICE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SERVICE.Entity = null;
						previousValue.PURCHASEORDERDETAILs.Remove(this);
					}
					this._SERVICE.Entity = value;
					if ((value != null))
					{
						value.PURCHASEORDERDETAILs.Add(this);
						this._ServiceID = value.ID;
					}
					else
					{
						this._ServiceID = default(int);
					}
					this.SendPropertyChanged("SERVICE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RECEIVEROOM")]
	public partial class RECEIVEROOM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _IDBookRoom;
		
		private int _IDRoom;
		
		private EntitySet<BILL> _BILLs;
		
		private EntitySet<RECEIVEROOMDETAIL> _RECEIVEROOMDETAILs;
		
		private EntityRef<BOOKROOM> _BOOKROOM;
		
		private EntityRef<ROOM> _ROOM;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnIDBookRoomChanging(int value);
    partial void OnIDBookRoomChanged();
    partial void OnIDRoomChanging(int value);
    partial void OnIDRoomChanged();
    #endregion
		
		public RECEIVEROOM()
		{
			this._BILLs = new EntitySet<BILL>(new Action<BILL>(this.attach_BILLs), new Action<BILL>(this.detach_BILLs));
			this._RECEIVEROOMDETAILs = new EntitySet<RECEIVEROOMDETAIL>(new Action<RECEIVEROOMDETAIL>(this.attach_RECEIVEROOMDETAILs), new Action<RECEIVEROOMDETAIL>(this.detach_RECEIVEROOMDETAILs));
			this._BOOKROOM = default(EntityRef<BOOKROOM>);
			this._ROOM = default(EntityRef<ROOM>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDBookRoom", DbType="Int NOT NULL")]
		public int IDBookRoom
		{
			get
			{
				return this._IDBookRoom;
			}
			set
			{
				if ((this._IDBookRoom != value))
				{
					if (this._BOOKROOM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDBookRoomChanging(value);
					this.SendPropertyChanging();
					this._IDBookRoom = value;
					this.SendPropertyChanged("IDBookRoom");
					this.OnIDBookRoomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRoom", DbType="Int NOT NULL")]
		public int IDRoom
		{
			get
			{
				return this._IDRoom;
			}
			set
			{
				if ((this._IDRoom != value))
				{
					if (this._ROOM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDRoomChanging(value);
					this.SendPropertyChanging();
					this._IDRoom = value;
					this.SendPropertyChanged("IDRoom");
					this.OnIDRoomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RECEIVEROOM_BILL", Storage="_BILLs", ThisKey="ID", OtherKey="IDReceiveRoom")]
		public EntitySet<BILL> BILLs
		{
			get
			{
				return this._BILLs;
			}
			set
			{
				this._BILLs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RECEIVEROOM_RECEIVEROOMDETAIL", Storage="_RECEIVEROOMDETAILs", ThisKey="ID", OtherKey="IDReceiveRoom")]
		public EntitySet<RECEIVEROOMDETAIL> RECEIVEROOMDETAILs
		{
			get
			{
				return this._RECEIVEROOMDETAILs;
			}
			set
			{
				this._RECEIVEROOMDETAILs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BOOKROOM_RECEIVEROOM", Storage="_BOOKROOM", ThisKey="IDBookRoom", OtherKey="ID", IsForeignKey=true)]
		public BOOKROOM BOOKROOM
		{
			get
			{
				return this._BOOKROOM.Entity;
			}
			set
			{
				BOOKROOM previousValue = this._BOOKROOM.Entity;
				if (((previousValue != value) 
							|| (this._BOOKROOM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BOOKROOM.Entity = null;
						previousValue.RECEIVEROOMs.Remove(this);
					}
					this._BOOKROOM.Entity = value;
					if ((value != null))
					{
						value.RECEIVEROOMs.Add(this);
						this._IDBookRoom = value.ID;
					}
					else
					{
						this._IDBookRoom = default(int);
					}
					this.SendPropertyChanged("BOOKROOM");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ROOM_RECEIVEROOM", Storage="_ROOM", ThisKey="IDRoom", OtherKey="ID", IsForeignKey=true)]
		public ROOM ROOM
		{
			get
			{
				return this._ROOM.Entity;
			}
			set
			{
				ROOM previousValue = this._ROOM.Entity;
				if (((previousValue != value) 
							|| (this._ROOM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ROOM.Entity = null;
						previousValue.RECEIVEROOMs.Remove(this);
					}
					this._ROOM.Entity = value;
					if ((value != null))
					{
						value.RECEIVEROOMs.Add(this);
						this._IDRoom = value.ID;
					}
					else
					{
						this._IDRoom = default(int);
					}
					this.SendPropertyChanged("ROOM");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BILLs(BILL entity)
		{
			this.SendPropertyChanging();
			entity.RECEIVEROOM = this;
		}
		
		private void detach_BILLs(BILL entity)
		{
			this.SendPropertyChanging();
			entity.RECEIVEROOM = null;
		}
		
		private void attach_RECEIVEROOMDETAILs(RECEIVEROOMDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.RECEIVEROOM = this;
		}
		
		private void detach_RECEIVEROOMDETAILs(RECEIVEROOMDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.RECEIVEROOM = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RECEIVEROOMDETAILS")]
	public partial class RECEIVEROOMDETAIL : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDReceiveRoom;
		
		private int _IDCustomerOther;
		
		private EntityRef<CUSTOMER> _CUSTOMER;
		
		private EntityRef<RECEIVEROOM> _RECEIVEROOM;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDReceiveRoomChanging(int value);
    partial void OnIDReceiveRoomChanged();
    partial void OnIDCustomerOtherChanging(int value);
    partial void OnIDCustomerOtherChanged();
    #endregion
		
		public RECEIVEROOMDETAIL()
		{
			this._CUSTOMER = default(EntityRef<CUSTOMER>);
			this._RECEIVEROOM = default(EntityRef<RECEIVEROOM>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDReceiveRoom", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDReceiveRoom
		{
			get
			{
				return this._IDReceiveRoom;
			}
			set
			{
				if ((this._IDReceiveRoom != value))
				{
					if (this._RECEIVEROOM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDReceiveRoomChanging(value);
					this.SendPropertyChanging();
					this._IDReceiveRoom = value;
					this.SendPropertyChanged("IDReceiveRoom");
					this.OnIDReceiveRoomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCustomerOther", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IDCustomerOther
		{
			get
			{
				return this._IDCustomerOther;
			}
			set
			{
				if ((this._IDCustomerOther != value))
				{
					if (this._CUSTOMER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCustomerOtherChanging(value);
					this.SendPropertyChanging();
					this._IDCustomerOther = value;
					this.SendPropertyChanged("IDCustomerOther");
					this.OnIDCustomerOtherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CUSTOMER_RECEIVEROOMDETAIL", Storage="_CUSTOMER", ThisKey="IDCustomerOther", OtherKey="ID", IsForeignKey=true)]
		public CUSTOMER CUSTOMER
		{
			get
			{
				return this._CUSTOMER.Entity;
			}
			set
			{
				CUSTOMER previousValue = this._CUSTOMER.Entity;
				if (((previousValue != value) 
							|| (this._CUSTOMER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CUSTOMER.Entity = null;
						previousValue.RECEIVEROOMDETAILs.Remove(this);
					}
					this._CUSTOMER.Entity = value;
					if ((value != null))
					{
						value.RECEIVEROOMDETAILs.Add(this);
						this._IDCustomerOther = value.ID;
					}
					else
					{
						this._IDCustomerOther = default(int);
					}
					this.SendPropertyChanged("CUSTOMER");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RECEIVEROOM_RECEIVEROOMDETAIL", Storage="_RECEIVEROOM", ThisKey="IDReceiveRoom", OtherKey="ID", IsForeignKey=true)]
		public RECEIVEROOM RECEIVEROOM
		{
			get
			{
				return this._RECEIVEROOM.Entity;
			}
			set
			{
				RECEIVEROOM previousValue = this._RECEIVEROOM.Entity;
				if (((previousValue != value) 
							|| (this._RECEIVEROOM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RECEIVEROOM.Entity = null;
						previousValue.RECEIVEROOMDETAILs.Remove(this);
					}
					this._RECEIVEROOM.Entity = value;
					if ((value != null))
					{
						value.RECEIVEROOMDETAILs.Add(this);
						this._IDReceiveRoom = value.ID;
					}
					else
					{
						this._IDReceiveRoom = default(int);
					}
					this.SendPropertyChanged("RECEIVEROOM");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.report")]
	public partial class report
	{
		
		private System.Nullable<int> _idRoomType;
		
		private System.Nullable<int> _Month;
		
		private System.Nullable<int> _Year;
		
		private System.Nullable<float> _value;
		
		private System.Nullable<float> _rate;
		
		public report()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idRoomType", DbType="Int")]
		public System.Nullable<int> idRoomType
		{
			get
			{
				return this._idRoomType;
			}
			set
			{
				if ((this._idRoomType != value))
				{
					this._idRoomType = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Month", DbType="Int")]
		public System.Nullable<int> Month
		{
			get
			{
				return this._Month;
			}
			set
			{
				if ((this._Month != value))
				{
					this._Month = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int")]
		public System.Nullable<int> Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this._Year = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="Real")]
		public System.Nullable<float> value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this._value = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rate", DbType="Real")]
		public System.Nullable<float> rate
		{
			get
			{
				return this._rate;
			}
			set
			{
				if ((this._rate != value))
				{
					this._rate = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ROOM")]
	public partial class ROOM : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _IDRoomType;
		
		private int _IDStatusRoom;
		
		private EntitySet<RECEIVEROOM> _RECEIVEROOMs;
		
		private EntityRef<STATUSROOM> _STATUSROOM;
		
		private EntityRef<ROOMTYPE> _ROOMTYPE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIDRoomTypeChanging(int value);
    partial void OnIDRoomTypeChanged();
    partial void OnIDStatusRoomChanging(int value);
    partial void OnIDStatusRoomChanged();
    #endregion
		
		public ROOM()
		{
			this._RECEIVEROOMs = new EntitySet<RECEIVEROOM>(new Action<RECEIVEROOM>(this.attach_RECEIVEROOMs), new Action<RECEIVEROOM>(this.detach_RECEIVEROOMs));
			this._STATUSROOM = default(EntityRef<STATUSROOM>);
			this._ROOMTYPE = default(EntityRef<ROOMTYPE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDRoomType", DbType="Int NOT NULL")]
		public int IDRoomType
		{
			get
			{
				return this._IDRoomType;
			}
			set
			{
				if ((this._IDRoomType != value))
				{
					if (this._ROOMTYPE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDRoomTypeChanging(value);
					this.SendPropertyChanging();
					this._IDRoomType = value;
					this.SendPropertyChanged("IDRoomType");
					this.OnIDRoomTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDStatusRoom", DbType="Int NOT NULL")]
		public int IDStatusRoom
		{
			get
			{
				return this._IDStatusRoom;
			}
			set
			{
				if ((this._IDStatusRoom != value))
				{
					if (this._STATUSROOM.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDStatusRoomChanging(value);
					this.SendPropertyChanging();
					this._IDStatusRoom = value;
					this.SendPropertyChanged("IDStatusRoom");
					this.OnIDStatusRoomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ROOM_RECEIVEROOM", Storage="_RECEIVEROOMs", ThisKey="ID", OtherKey="IDRoom")]
		public EntitySet<RECEIVEROOM> RECEIVEROOMs
		{
			get
			{
				return this._RECEIVEROOMs;
			}
			set
			{
				this._RECEIVEROOMs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STATUSROOM_ROOM", Storage="_STATUSROOM", ThisKey="IDStatusRoom", OtherKey="ID", IsForeignKey=true)]
		public STATUSROOM STATUSROOM
		{
			get
			{
				return this._STATUSROOM.Entity;
			}
			set
			{
				STATUSROOM previousValue = this._STATUSROOM.Entity;
				if (((previousValue != value) 
							|| (this._STATUSROOM.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._STATUSROOM.Entity = null;
						previousValue.ROOMs.Remove(this);
					}
					this._STATUSROOM.Entity = value;
					if ((value != null))
					{
						value.ROOMs.Add(this);
						this._IDStatusRoom = value.ID;
					}
					else
					{
						this._IDStatusRoom = default(int);
					}
					this.SendPropertyChanged("STATUSROOM");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ROOMTYPE_ROOM", Storage="_ROOMTYPE", ThisKey="IDRoomType", OtherKey="ID", IsForeignKey=true)]
		public ROOMTYPE ROOMTYPE
		{
			get
			{
				return this._ROOMTYPE.Entity;
			}
			set
			{
				ROOMTYPE previousValue = this._ROOMTYPE.Entity;
				if (((previousValue != value) 
							|| (this._ROOMTYPE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ROOMTYPE.Entity = null;
						previousValue.ROOMs.Remove(this);
					}
					this._ROOMTYPE.Entity = value;
					if ((value != null))
					{
						value.ROOMs.Add(this);
						this._IDRoomType = value.ID;
					}
					else
					{
						this._IDRoomType = default(int);
					}
					this.SendPropertyChanged("ROOMTYPE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RECEIVEROOMs(RECEIVEROOM entity)
		{
			this.SendPropertyChanging();
			entity.ROOM = this;
		}
		
		private void detach_RECEIVEROOMs(RECEIVEROOM entity)
		{
			this.SendPropertyChanging();
			entity.ROOM = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ROOMTYPE")]
	public partial class ROOMTYPE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _Price;
		
		private int _LimitPerson;
		
		private EntitySet<BOOKROOM> _BOOKROOMs;
		
		private EntitySet<ROOM> _ROOMs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPriceChanging(int value);
    partial void OnPriceChanged();
    partial void OnLimitPersonChanging(int value);
    partial void OnLimitPersonChanged();
    #endregion
		
		public ROOMTYPE()
		{
			this._BOOKROOMs = new EntitySet<BOOKROOM>(new Action<BOOKROOM>(this.attach_BOOKROOMs), new Action<BOOKROOM>(this.detach_BOOKROOMs));
			this._ROOMs = new EntitySet<ROOM>(new Action<ROOM>(this.attach_ROOMs), new Action<ROOM>(this.detach_ROOMs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int NOT NULL")]
		public int Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LimitPerson", DbType="Int NOT NULL")]
		public int LimitPerson
		{
			get
			{
				return this._LimitPerson;
			}
			set
			{
				if ((this._LimitPerson != value))
				{
					this.OnLimitPersonChanging(value);
					this.SendPropertyChanging();
					this._LimitPerson = value;
					this.SendPropertyChanged("LimitPerson");
					this.OnLimitPersonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ROOMTYPE_BOOKROOM", Storage="_BOOKROOMs", ThisKey="ID", OtherKey="IDRoomType")]
		public EntitySet<BOOKROOM> BOOKROOMs
		{
			get
			{
				return this._BOOKROOMs;
			}
			set
			{
				this._BOOKROOMs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ROOMTYPE_ROOM", Storage="_ROOMs", ThisKey="ID", OtherKey="IDRoomType")]
		public EntitySet<ROOM> ROOMs
		{
			get
			{
				return this._ROOMs;
			}
			set
			{
				this._ROOMs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BOOKROOMs(BOOKROOM entity)
		{
			this.SendPropertyChanging();
			entity.ROOMTYPE = this;
		}
		
		private void detach_BOOKROOMs(BOOKROOM entity)
		{
			this.SendPropertyChanging();
			entity.ROOMTYPE = null;
		}
		
		private void attach_ROOMs(ROOM entity)
		{
			this.SendPropertyChanging();
			entity.ROOMTYPE = this;
		}
		
		private void detach_ROOMs(ROOM entity)
		{
			this.SendPropertyChanging();
			entity.ROOMTYPE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SERVICE")]
	public partial class SERVICE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _IDServiceType;
		
		private int _Price;
		
		private EntitySet<BILLDETAIL> _BILLDETAILs;
		
		private EntitySet<PURCHASEORDER> _PURCHASEORDERs;
		
		private EntitySet<PURCHASEORDERDETAIL> _PURCHASEORDERDETAILs;
		
		private EntityRef<SERVICETYPE> _SERVICETYPE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIDServiceTypeChanging(int value);
    partial void OnIDServiceTypeChanged();
    partial void OnPriceChanging(int value);
    partial void OnPriceChanged();
    #endregion
		
		public SERVICE()
		{
			this._BILLDETAILs = new EntitySet<BILLDETAIL>(new Action<BILLDETAIL>(this.attach_BILLDETAILs), new Action<BILLDETAIL>(this.detach_BILLDETAILs));
			this._PURCHASEORDERs = new EntitySet<PURCHASEORDER>(new Action<PURCHASEORDER>(this.attach_PURCHASEORDERs), new Action<PURCHASEORDER>(this.detach_PURCHASEORDERs));
			this._PURCHASEORDERDETAILs = new EntitySet<PURCHASEORDERDETAIL>(new Action<PURCHASEORDERDETAIL>(this.attach_PURCHASEORDERDETAILs), new Action<PURCHASEORDERDETAIL>(this.detach_PURCHASEORDERDETAILs));
			this._SERVICETYPE = default(EntityRef<SERVICETYPE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDServiceType", DbType="Int NOT NULL")]
		public int IDServiceType
		{
			get
			{
				return this._IDServiceType;
			}
			set
			{
				if ((this._IDServiceType != value))
				{
					if (this._SERVICETYPE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDServiceTypeChanging(value);
					this.SendPropertyChanging();
					this._IDServiceType = value;
					this.SendPropertyChanged("IDServiceType");
					this.OnIDServiceTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int NOT NULL")]
		public int Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SERVICE_BILLDETAIL", Storage="_BILLDETAILs", ThisKey="ID", OtherKey="IDService")]
		public EntitySet<BILLDETAIL> BILLDETAILs
		{
			get
			{
				return this._BILLDETAILs;
			}
			set
			{
				this._BILLDETAILs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SERVICE_PURCHASEORDER", Storage="_PURCHASEORDERs", ThisKey="ID", OtherKey="ServiceID")]
		public EntitySet<PURCHASEORDER> PURCHASEORDERs
		{
			get
			{
				return this._PURCHASEORDERs;
			}
			set
			{
				this._PURCHASEORDERs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SERVICE_PURCHASEORDERDETAIL", Storage="_PURCHASEORDERDETAILs", ThisKey="ID", OtherKey="ServiceID")]
		public EntitySet<PURCHASEORDERDETAIL> PURCHASEORDERDETAILs
		{
			get
			{
				return this._PURCHASEORDERDETAILs;
			}
			set
			{
				this._PURCHASEORDERDETAILs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SERVICETYPE_SERVICE", Storage="_SERVICETYPE", ThisKey="IDServiceType", OtherKey="ID", IsForeignKey=true)]
		public SERVICETYPE SERVICETYPE
		{
			get
			{
				return this._SERVICETYPE.Entity;
			}
			set
			{
				SERVICETYPE previousValue = this._SERVICETYPE.Entity;
				if (((previousValue != value) 
							|| (this._SERVICETYPE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SERVICETYPE.Entity = null;
						previousValue.SERVICEs.Remove(this);
					}
					this._SERVICETYPE.Entity = value;
					if ((value != null))
					{
						value.SERVICEs.Add(this);
						this._IDServiceType = value.ID;
					}
					else
					{
						this._IDServiceType = default(int);
					}
					this.SendPropertyChanged("SERVICETYPE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BILLDETAILs(BILLDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.SERVICE = this;
		}
		
		private void detach_BILLDETAILs(BILLDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.SERVICE = null;
		}
		
		private void attach_PURCHASEORDERs(PURCHASEORDER entity)
		{
			this.SendPropertyChanging();
			entity.SERVICE = this;
		}
		
		private void detach_PURCHASEORDERs(PURCHASEORDER entity)
		{
			this.SendPropertyChanging();
			entity.SERVICE = null;
		}
		
		private void attach_PURCHASEORDERDETAILs(PURCHASEORDERDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.SERVICE = this;
		}
		
		private void detach_PURCHASEORDERDETAILs(PURCHASEORDERDETAIL entity)
		{
			this.SendPropertyChanging();
			entity.SERVICE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SERVICETYPE")]
	public partial class SERVICETYPE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<SERVICE> _SERVICEs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public SERVICETYPE()
		{
			this._SERVICEs = new EntitySet<SERVICE>(new Action<SERVICE>(this.attach_SERVICEs), new Action<SERVICE>(this.detach_SERVICEs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SERVICETYPE_SERVICE", Storage="_SERVICEs", ThisKey="ID", OtherKey="IDServiceType")]
		public EntitySet<SERVICE> SERVICEs
		{
			get
			{
				return this._SERVICEs;
			}
			set
			{
				this._SERVICEs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SERVICEs(SERVICE entity)
		{
			this.SendPropertyChanging();
			entity.SERVICETYPE = this;
		}
		
		private void detach_SERVICEs(SERVICE entity)
		{
			this.SendPropertyChanging();
			entity.SERVICETYPE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.STAFF")]
	public partial class STAFF : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserName;
		
		private string _DisplayName;
		
		private string _PassWord;
		
		private int _IDStaffType;
		
		private string _IDCard;
		
		private System.DateTime _DateOfBirth;
		
		private string _Sex;
		
		private string _Address;
		
		private int _PhoneNumber;
		
		private System.DateTime _StartDay;
		
		private EntitySet<BILL> _BILLs;
		
		private EntitySet<PURCHASEORDER> _PURCHASEORDERs;
		
		private EntityRef<STAFFTYPE> _STAFFTYPE;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnPassWordChanging(string value);
    partial void OnPassWordChanged();
    partial void OnIDStaffTypeChanging(int value);
    partial void OnIDStaffTypeChanged();
    partial void OnIDCardChanging(string value);
    partial void OnIDCardChanged();
    partial void OnDateOfBirthChanging(System.DateTime value);
    partial void OnDateOfBirthChanged();
    partial void OnSexChanging(string value);
    partial void OnSexChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneNumberChanging(int value);
    partial void OnPhoneNumberChanged();
    partial void OnStartDayChanging(System.DateTime value);
    partial void OnStartDayChanged();
    #endregion
		
		public STAFF()
		{
			this._BILLs = new EntitySet<BILL>(new Action<BILL>(this.attach_BILLs), new Action<BILL>(this.detach_BILLs));
			this._PURCHASEORDERs = new EntitySet<PURCHASEORDER>(new Action<PURCHASEORDER>(this.attach_PURCHASEORDERs), new Action<PURCHASEORDER>(this.detach_PURCHASEORDERs));
			this._STAFFTYPE = default(EntityRef<STAFFTYPE>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassWord", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string PassWord
		{
			get
			{
				return this._PassWord;
			}
			set
			{
				if ((this._PassWord != value))
				{
					this.OnPassWordChanging(value);
					this.SendPropertyChanging();
					this._PassWord = value;
					this.SendPropertyChanged("PassWord");
					this.OnPassWordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDStaffType", DbType="Int NOT NULL")]
		public int IDStaffType
		{
			get
			{
				return this._IDStaffType;
			}
			set
			{
				if ((this._IDStaffType != value))
				{
					if (this._STAFFTYPE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDStaffTypeChanging(value);
					this.SendPropertyChanging();
					this._IDStaffType = value;
					this.SendPropertyChanged("IDStaffType");
					this.OnIDStaffTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCard", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string IDCard
		{
			get
			{
				return this._IDCard;
			}
			set
			{
				if ((this._IDCard != value))
				{
					this.OnIDCardChanging(value);
					this.SendPropertyChanging();
					this._IDCard = value;
					this.SendPropertyChanged("IDCard");
					this.OnIDCardChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="Date NOT NULL")]
		public System.DateTime DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sex", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Sex
		{
			get
			{
				return this._Sex;
			}
			set
			{
				if ((this._Sex != value))
				{
					this.OnSexChanging(value);
					this.SendPropertyChanging();
					this._Sex = value;
					this.SendPropertyChanged("Sex");
					this.OnSexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="Int NOT NULL")]
		public int PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDay", DbType="Date NOT NULL")]
		public System.DateTime StartDay
		{
			get
			{
				return this._StartDay;
			}
			set
			{
				if ((this._StartDay != value))
				{
					this.OnStartDayChanging(value);
					this.SendPropertyChanging();
					this._StartDay = value;
					this.SendPropertyChanged("StartDay");
					this.OnStartDayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STAFF_BILL", Storage="_BILLs", ThisKey="UserName", OtherKey="StaffSetUp")]
		public EntitySet<BILL> BILLs
		{
			get
			{
				return this._BILLs;
			}
			set
			{
				this._BILLs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STAFF_PURCHASEORDER", Storage="_PURCHASEORDERs", ThisKey="UserName", OtherKey="UserName")]
		public EntitySet<PURCHASEORDER> PURCHASEORDERs
		{
			get
			{
				return this._PURCHASEORDERs;
			}
			set
			{
				this._PURCHASEORDERs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STAFFTYPE_STAFF", Storage="_STAFFTYPE", ThisKey="IDStaffType", OtherKey="ID", IsForeignKey=true)]
		public STAFFTYPE STAFFTYPE
		{
			get
			{
				return this._STAFFTYPE.Entity;
			}
			set
			{
				STAFFTYPE previousValue = this._STAFFTYPE.Entity;
				if (((previousValue != value) 
							|| (this._STAFFTYPE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._STAFFTYPE.Entity = null;
						previousValue.STAFFs.Remove(this);
					}
					this._STAFFTYPE.Entity = value;
					if ((value != null))
					{
						value.STAFFs.Add(this);
						this._IDStaffType = value.ID;
					}
					else
					{
						this._IDStaffType = default(int);
					}
					this.SendPropertyChanged("STAFFTYPE");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BILLs(BILL entity)
		{
			this.SendPropertyChanging();
			entity.STAFF = this;
		}
		
		private void detach_BILLs(BILL entity)
		{
			this.SendPropertyChanging();
			entity.STAFF = null;
		}
		
		private void attach_PURCHASEORDERs(PURCHASEORDER entity)
		{
			this.SendPropertyChanging();
			entity.STAFF = this;
		}
		
		private void detach_PURCHASEORDERs(PURCHASEORDER entity)
		{
			this.SendPropertyChanging();
			entity.STAFF = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.STAFFTYPE")]
	public partial class STAFFTYPE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<STAFF> _STAFFs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public STAFFTYPE()
		{
			this._STAFFs = new EntitySet<STAFF>(new Action<STAFF>(this.attach_STAFFs), new Action<STAFF>(this.detach_STAFFs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STAFFTYPE_STAFF", Storage="_STAFFs", ThisKey="ID", OtherKey="IDStaffType")]
		public EntitySet<STAFF> STAFFs
		{
			get
			{
				return this._STAFFs;
			}
			set
			{
				this._STAFFs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_STAFFs(STAFF entity)
		{
			this.SendPropertyChanging();
			entity.STAFFTYPE = this;
		}
		
		private void detach_STAFFs(STAFF entity)
		{
			this.SendPropertyChanging();
			entity.STAFFTYPE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.STATUSBILL")]
	public partial class STATUSBILL : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<BILL> _BILLs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public STATUSBILL()
		{
			this._BILLs = new EntitySet<BILL>(new Action<BILL>(this.attach_BILLs), new Action<BILL>(this.detach_BILLs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="STATUSBILL_BILL", Storage="_BILLs", ThisKey="ID", OtherKey="IDStatusBill")]
		public EntitySet<BILL> BILLs
		{
			get
			{
				return this._BILLs;
			}
			set
			{
				this._BILLs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BILLs(BILL entity)
		{
			this.SendPropertyChanging();
			entity.STATUSBILL = this;
		}
		
		private void detach_BILLs(BILL entity)
		{
			this.SendPropertyChanging();
			entity.STATUSBILL = null;
		}
	}
}
#pragma warning restore 1591
